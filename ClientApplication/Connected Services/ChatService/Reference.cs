//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApplication.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientMessage", Namespace="http://schemas.datacontract.org/2004/07/TechTest")]
    [System.SerializableAttribute()]
    public partial class ClientMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdTsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Ts {
            get {
                return this.TsField;
            }
            set {
                if ((this.TsField.Equals(value) != true)) {
                    this.TsField = value;
                    this.RaisePropertyChanged("Ts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdTs {
            get {
                return this.UpdTsField;
            }
            set {
                if ((this.UpdTsField.Equals(value) != true)) {
                    this.UpdTsField = value;
                    this.RaisePropertyChanged("UpdTs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddMessage", ReplyAction="http://tempuri.org/IChatService/AddMessageResponse")]
        string AddMessage(string message, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddMessage", ReplyAction="http://tempuri.org/IChatService/AddMessageResponse")]
        System.Threading.Tasks.Task<string> AddMessageAsync(string message, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AlterMessage", ReplyAction="http://tempuri.org/IChatService/AlterMessageResponse")]
        void AlterMessage(string newMessage, string messageId, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AlterMessage", ReplyAction="http://tempuri.org/IChatService/AlterMessageResponse")]
        System.Threading.Tasks.Task AlterMessageAsync(string newMessage, string messageId, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DeleteMessageById", ReplyAction="http://tempuri.org/IChatService/DeleteMessageByIdResponse")]
        void DeleteMessageById(string messageId, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DeleteMessageById", ReplyAction="http://tempuri.org/IChatService/DeleteMessageByIdResponse")]
        System.Threading.Tasks.Task DeleteMessageByIdAsync(string messageId, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllMessagesMadeByClient", ReplyAction="http://tempuri.org/IChatService/GetAllMessagesMadeByClientResponse")]
        ClientApplication.ChatService.ClientMessage[] GetAllMessagesMadeByClient(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllMessagesMadeByClient", ReplyAction="http://tempuri.org/IChatService/GetAllMessagesMadeByClientResponse")]
        System.Threading.Tasks.Task<ClientApplication.ChatService.ClientMessage[]> GetAllMessagesMadeByClientAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllMessagesAllClients", ReplyAction="http://tempuri.org/IChatService/GetAllMessagesAllClientsResponse")]
        ClientApplication.ChatService.ClientMessage[] GetAllMessagesAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllMessagesAllClients", ReplyAction="http://tempuri.org/IChatService/GetAllMessagesAllClientsResponse")]
        System.Threading.Tasks.Task<ClientApplication.ChatService.ClientMessage[]> GetAllMessagesAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientDissconnect", ReplyAction="http://tempuri.org/IChatService/ClientDissconnectResponse")]
        void ClientDissconnect(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientDissconnect", ReplyAction="http://tempuri.org/IChatService/ClientDissconnectResponse")]
        System.Threading.Tasks.Task ClientDissconnectAsync(string clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ClientApplication.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<ClientApplication.ChatService.IChatService>, ClientApplication.ChatService.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddMessage(string message, string clientId) {
            return base.Channel.AddMessage(message, clientId);
        }
        
        public System.Threading.Tasks.Task<string> AddMessageAsync(string message, string clientId) {
            return base.Channel.AddMessageAsync(message, clientId);
        }
        
        public void AlterMessage(string newMessage, string messageId, string clientId) {
            base.Channel.AlterMessage(newMessage, messageId, clientId);
        }
        
        public System.Threading.Tasks.Task AlterMessageAsync(string newMessage, string messageId, string clientId) {
            return base.Channel.AlterMessageAsync(newMessage, messageId, clientId);
        }
        
        public void DeleteMessageById(string messageId, string clientId) {
            base.Channel.DeleteMessageById(messageId, clientId);
        }
        
        public System.Threading.Tasks.Task DeleteMessageByIdAsync(string messageId, string clientId) {
            return base.Channel.DeleteMessageByIdAsync(messageId, clientId);
        }
        
        public ClientApplication.ChatService.ClientMessage[] GetAllMessagesMadeByClient(string clientId) {
            return base.Channel.GetAllMessagesMadeByClient(clientId);
        }
        
        public System.Threading.Tasks.Task<ClientApplication.ChatService.ClientMessage[]> GetAllMessagesMadeByClientAsync(string clientId) {
            return base.Channel.GetAllMessagesMadeByClientAsync(clientId);
        }
        
        public ClientApplication.ChatService.ClientMessage[] GetAllMessagesAllClients() {
            return base.Channel.GetAllMessagesAllClients();
        }
        
        public System.Threading.Tasks.Task<ClientApplication.ChatService.ClientMessage[]> GetAllMessagesAllClientsAsync() {
            return base.Channel.GetAllMessagesAllClientsAsync();
        }
        
        public void ClientDissconnect(string clientId) {
            base.Channel.ClientDissconnect(clientId);
        }
        
        public System.Threading.Tasks.Task ClientDissconnectAsync(string clientId) {
            return base.Channel.ClientDissconnectAsync(clientId);
        }
    }
}
